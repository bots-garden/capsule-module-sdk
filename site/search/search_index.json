{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capsule Module SDK","text":"<p>What's new?</p> <ul> <li><code>v0.0.1</code>: \ud83c\udf89 first release</li> </ul>"},{"location":"#what-is-the-capsule-module-sdk-alias-capsule-mdk","title":"What is the Capsule Module SDK alias Capsule MDK?","text":"<p>Capsule MDK is a WASM SDK to develop WASM modules for the Capsule applications.</p> <p>The Capsule WASM modules are developed in GoLang and compiled with TinyGo \ud83d\udc9c (with the WASI specification)</p>"},{"location":"#capsule-applications","title":"Capsule applications?","text":"<p>A Capsule application is a WebAssembly Module(or Function) Runner. Right now, it exists two kind of Capsule application:</p> <ul> <li>capsule-cli, CLI. With capsule-cli, you can simply execute a WebAssembly Capsule module in a terminal</li> <li>capsule-http, an HTTP server that serves WebAssembly Capsule modules</li> </ul> <p>Good to know</p> <ul> <li>\ud83d\udd90 you can develop your own Capsule application with Capsule Host SDK (alias Capsule HDK).</li> <li>\ud83e\udd17 a capsule application is \"small\" (capsule-http weighs 12M)</li> <li>\ud83d\udc33 a Capsule application is statically compiled: you can easily run it in a Distroless Docker container.</li> <li>\ud83d\udc9c The Capsule applications are developed with GoLang and thanks to the Wazero project</li> </ul>"},{"location":"#what-does-a-wasm-capsule-function-look-like","title":"What does a WASM Capsule function look like?","text":"<pre><code>package main\nimport (\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\n// define wich function to run\ncapsule.SetHandle(Handle)\n}\n// Handle function\nfunc Handle(params []byte) ([]byte, error) {\nname := string(params)\nmessage := \"\ud83d\udc4b Hello \" + name\nreturn []byte(message), nil\n}\n</code></pre>"},{"location":"#what-are-the-added-values-of-a-capsule-application","title":"What are the added values of a Capsule application?","text":"<p>A Capsule application brings superpowers to the WASM Capsule modules with host functions. Thanks to these host functions, a WASM Capsule module can, for example, prints a message, reads files, writes to files, makes HTTP requests, ... See the host functions section.</p> <p>Useful information for this project</p> <ul> <li>\ud83d\udd90 Issues: https://github.com/bots-garden/capsule-module-sdk/issues</li> <li>\ud83d\udea7 Milestones: https://github.com/bots-garden/capsule-module-sdk/milestones</li> <li>\ud83d\udce6 Releases: https://github.com/bots-garden/capsule-module-sdk/releases</li> </ul>"},{"location":"first-cli-module/","title":"Developer Guide","text":""},{"location":"first-cli-module/#first-cli-module","title":"First CLI Module","text":"<p>Create a directory <code>cli-say-hello</code></p> <pre><code>mkdir cli-say-hello\ncd cli-say-hello\n</code></pre> <p>Initialize a new project in <code>cli-say-hello</code>:</p> <pre><code>go mod init cli-say-hello\n</code></pre> <p>Install the Capsule MDK dependencies: <pre><code>go https://github.com/bots-garden/capsule-module-sdk\n</code></pre></p> <p>Create a new file <code>main.go</code> in <code>cli-say-hello</code>:</p> <pre><code>package main\nimport (\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandle(Handle)\n}\n// Handle function\nfunc Handle(params []byte) ([]byte, error) {\n// Display the content of `params`\ncapsule.Print(\"Module parameter(s): \" + string(params))\n// Read an display an environment variable \ncapsule.Print(\"MESSAGE: \" + capsule.GetEnv(\"MESSAGE\"))\n// Write content to a file\nerr := capsule.WriteFile(\"./hello.txt\", []byte(\"\ud83d\udc4b Hello World! \ud83c\udf0d\"))\nif err != nil {\ncapsule.Print(err.Error())\n}\n// Read content from a file\ndata, err := capsule.ReadFile(\"./hello.txt\")\nif err != nil {\ncapsule.Print(err.Error())\n}\ncapsule.Print(\"\ud83d\udcdd: \" + string(data))\nreturn []byte(\"\ud83d\udc4b Hello \" + string(params)), nil\n}\n</code></pre> <ul> <li><code>capsule.SetHandle(Handle)</code> defines the called wasm function</li> <li><code>capsule.Print()</code>, <code>capsule.GetEnv()</code>, <code>capsule.WriteFile()</code> and <code>capsule.ReadFile()</code> are host functions defined in the Capsule HDK https://github.com/bots-garden/capsule-host-sdk</li> </ul> <p>Build the wasm module: <pre><code>tinygo build -o cli-say-hello.wasm -scheduler=none --no-debug -target wasi ./main.go\n</code></pre></p> <p>Run the module:</p> <p>You need to download the last capsule CLI: https://github.com/bots-garden/capsule/releases <pre><code>export MESSAGE=\"\ud83d\udc4b Hello Capsule\"\n./capsule --wasm=cli-say-hello.wasm --params=\"Jane Doe\"\n</code></pre> - <code>--wasm</code> flag: the path to the wasm file - <code>--mode</code> flag: the parameter to pass to the wasm module</p> <p>output: <pre><code>Module parameter(s): Jane Doe\nMESSAGE: \ud83d\udc4b Hello Capsule\n\ud83d\udcdd: \ud83d\udc4b Hello World! \ud83c\udf0d\n\ud83d\udc4b Hello Jane Doe\n</code></pre></p> <p>You can find more samples on /capsule/capsule-cli</p>"},{"location":"first-http-module/","title":"Developer Guide","text":""},{"location":"first-http-module/#first-http-module","title":"First HTTP Module","text":"<p>Create a directory <code>http-say-hello</code></p> <pre><code>mkdir http-say-hello\ncd http-say-hello\n</code></pre> <p>Initialize a new project in <code>http-say-hello</code>:</p> <pre><code>go mod init http-say-hello\n</code></pre> <p>Install the Capsule MDK dependencies: <pre><code>go https://github.com/bots-garden/capsule-module-sdk\n</code></pre></p> <p>Create a new file <code>main.go</code> in <code>http-say-hello</code>:</p> <pre><code>// Package main\npackage main\nimport (\n\"strconv\"\n\"github.com/bots-garden/capsule-module-sdk\"\n\"github.com/valyala/fastjson\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(Handle)\n}\n// Handle function \nfunc Handle(param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\ncapsule.Print(\"\ud83d\udcdd: \" + param.Body)\ncapsule.Print(\"\ud83d\udd20: \" + param.Method)\ncapsule.Print(\"\ud83c\udf0d: \" + param.URI)\ncapsule.Print(\"\ud83d\udc52: \" + param.Headers)\nvar p fastjson.Parser\njsonBody, err := p.Parse(param.Body)\nif err != nil {\ncapsule.Log(err.Error())\n}\nmessage := string(jsonBody.GetStringBytes(\"name\")) + \" \" + strconv.Itoa(jsonBody.GetInt(\"age\"))\ncapsule.Log(message)\nresponse := capsule.HTTPResponse{\nJSONBody: `{\"message\": \"`+message+`\"}`,\nHeaders: `{\"Content-Type\": \"application/json; charset=utf-8\"}`,\nStatusCode: 200,\n}\nreturn response, nil\n}\n</code></pre> <ul> <li><code>capsule.SetHandleHTTP(Handle)</code> defines the called wasm function</li> <li><code>capsule.Print()</code> and <code>capsule.Log()</code> are host functions defined in the Capsule HDK https://github.com/bots-garden/capsule-host-sdk</li> <li><code>capsule.HTTPRequest</code> and <code>capsule.HTTPResponse</code> are structures defined in models.go</li> </ul> <p>Build the wasm module: <pre><code>tinygo build -o http-say-hello.wasm -scheduler=none --no-debug -target wasi ./main.go\n</code></pre></p> <p>Serve the module:</p> <p>You need to download the last capsule-http runner: https://github.com/bots-garden/capsule/releases <pre><code>./capsule-http --wasm=http-say-hello.wasm --httpPort=8080\n</code></pre> - <code>--wasm</code> flag: the path to the wasm file - <code>--httpPort</code> flag: the HTTP port to listen on</p> <p>Call the module (function):</p> <pre><code>curl -X POST http://localhost:8080 \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d '{\"name\":\"Bob Morane\",\"age\":42}'\n</code></pre> <p>output: (curl response) <pre><code>{\"message\":\"Bob Morane 42\"}\n</code></pre></p> <p>output: (on the capsule-http side) <pre><code>\ud83d\udcdd: {\"name\":\"Bob Morane\",\"age\":42}\n\ud83d\udd20: POST\n\ud83c\udf0d: http://localhost:8080/\n\ud83d\udc52: \"Content-Type\":\"application/json; charset=utf-8\",\"User-Agent\":\"curl/7.81.0\",\"Accept\":\"*/*\",\"Host\":\"localhost:8080\",\"Content-Length\":\"30\"\n2023-05-06 08:55:55.717252231 +0200 CEST m=+24.164260454 : Bob Morane 42\n</code></pre></p> <p>You can find more samples on /capsule/capsule-http</p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started/#create-a-capsule-module","title":"Create a Capsule module","text":"<p>Create a directory <code>say-hello</code></p> <pre><code>mkdir say-hello\ncd say-hello\n</code></pre> <p>Initialize a new project in <code>say-hello</code>:</p> <pre><code>go mod init say-hello\n</code></pre> <p>Create a new file <code>main.go</code> in <code>say-hello</code>:</p> <pre><code>package main\nimport (\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\n// define wich function to run\ncapsule.SetHandle(Handle)\n}\n// Handle function\nfunc Handle(params []byte) ([]byte, error) {\nname := string(params)\nmessage := \"\ud83d\udc4b Hello \" + name\nreturn []byte(message), nil\n}\n</code></pre>"},{"location":"getting-started/#build-the-wasm-capsule-module","title":"Build the WASM Capsule module","text":"<pre><code>tinygo build -o say-hello.wasm -scheduler=none --no-debug -target wasi ./main.go\n</code></pre>"},{"location":"getting-started/#execute-the-wasm-capsule-module","title":"Execute the WASM Capsule module","text":"<p>You need to download the last capsule CLI: https://github.com/bots-garden/capsule/releases</p> <pre><code>./capsule --wasm=say-hello.wasm --params=\"Bob Morane\"\n</code></pre> <p>You should get: <code>\ud83d\udc4b Hello Bob Morane</code></p>"},{"location":"host-functions/","title":"Host functions","text":"<p>\ud83d\udea7 this is a work in progress, each host function will be detailed with samples.</p> <p>The Capsule applications (and the Capsule HDK) offer some capabilities to the wasm modules by providing some \"host functions\".</p>"}]}